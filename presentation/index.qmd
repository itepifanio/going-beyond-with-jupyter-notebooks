---
title: "Going beyond with Jupyter notebooks"
subtitle: "Welcome! This tutorial will present how to use Jupyter notebooks to publish python packages and more"
format:
  revealjs: 
    slide-number: true
    logo: images/palaimon_logo.svg
    css: styles.css
    footer: Going beyond with Jupyter notebooks
---

## Hello there {.smaller}

This tutorial will:

- Introduce the main concepts to publish a package and why to do it
- Discuss the Python packaging system and distribution
- Explain the literate programming concept
- Show Jupyter notebook and Jupyter lab UI
- Introduce Nbdev lib and how we can use literate programming to publish Python packages
- Explain good practices in notebooks and Nbdev
- Develop a French Deck lib and mini game

## Hello there {.smaller}

- Display quality assurance tools
- Discuss notebook testing 
- Show how and where to publish a Python package
- Introduce Github Actions usage add a CI/CD to our workflow
- Talk about Python packaging future and past
- Introduce how to build UI for notebooks
- Show Quarto customization
- Display how to use Chat GPT in notebooks

# Python packaging

Let's introduce/review some core concepts to understand python packaging and its structure

## Modules

> Modules are files that contains Python definitions and statements,
 [Python Docs](https://docs.python.org/3/tutorial/modules.html#modules)

Any file `.py` can be considered a module

```python
%%writefile module.py

def hello(name):
    print(f'hello, {name}')
```

```python
import module

module.hello("audience!")
```

## Modules

Modules can also be executed as python scripts

```python
%%writefile module.py

def hello(name):
    print(f'hello, {name}')

if __name__ == "__main__":
    import sys
    hello(sys.argv[1])
```

```python
! python module.py 'Maria'
```

::: {.callout-note}
The conditional `if __name__ == "__main__"` makes sure that the function `hello` 
it will be executed only when the module it's running as "main" file. This strategy 
allows python files to be imported and also used as scripts
:::

## Python modules search

Python interpreter searchs for a module:

- Looking first at its built-in modules (listed at `sys.builtin_module_names`)
- Looks for python files in the directory list (`sys.path`)

## Packages {.smaller}

> Is a way to struct Python namespaces using dotted module names,
 [Python Docs](https://docs.python.org/3/tutorial/modules.html#packages)

Packages can be understood as a collection of modules. Check the following structure.

```
somefolder/
    minimal_package/
        __init__.py
        module1.py
        subpackage/
            module2.py
```

::: {.callout-note}
- Create this folder structure on your machine
- Open your terminal
- Import module1 `from minimal_package import module1`
- Import module2 `from minimal_package.subpackage import module2`
- Access a different folder (`cd ..`) and import the minimal_package
- sys.path and `pip install -e .[dev]`
:::

## Python package search

When importing packages, Python looks for the directories names listed at `sys.path`

# Why packaging?

Let's discuss the pros and cons of packaging

## Why packaging?

Let's think about the "Avengers" movie as a big package with multiple heroes (Hulk, Black Widow, Thor, etc).

```{mermaid}
flowchart LR
  subgraph avengers1
    A["Avengers\n (Hulk, Black Widow, Thor)"]
  end

  subgraph avengers2
   direction TB
    B["Hulk"] --> C["Avengers"]
    D["Thor"] --> C
    E["Black Widow"] --> C
  end

  avengers1 --> avengers2
```

:::{.callout-note}
Example from [Arquitetura Modular com pacotes Python](https://www.youtube.com/watch?v=Ccw9Dlw9b2c) talk presented at Python Brazil, 2022
:::

:::{.notes}
To reutilize different heroes in different timeline it would be required code duplicated and increased complexity. The idea of creating a package for every hero allows combine them in different movies
:::

## Pros and cons

::: {.columns}

::: {.column width="50%"}
- Increases the code reuse
- Reduces coupling 
- Easier to other developers to use
- Split responsability across teams
- It can make the maintenance easier
:::

::: {.column width="50%"}
- Harder to maintain
- Dependency management can be difficult
- Security of third parts packages
- Packages sometimes has more features than it's required
:::

:::

## How to publish? {.smaller}

We have previously installed our minimal package locally but how we can 
publish on pip and use it to download?

```{mermaid}
flowchart TD
  A["Package project files (setup.py, pyproject.toml)"] --> B["Build backend (sdist, wheel)"]
  B --> C["Package artifact (.tar.gz, .whl)"]
  C --> D["Twine upload (Pypi, TestPypi)"]
```

# Pypi

Python Package Index

## Tooling

- [pip](https://packaging.python.org/en/latest/key_projects/#pip) is the most popular package manager in python
- [PyPI](https://pypi.org/) is the index where pip downloads content from
- [Test PyPI](https://packaging.python.org/en/latest/guides/using-testpypi/) a separated index for testing

:::{.callout-note}
Create your account at https://test.pypi.org, let's use it to publish our minimal package
:::

## Publishing minimal package {.smaller}

- Go to the root of the "minimal package"
- Create a setup.py file with the following content:

```python
from setuptools import setup

setup(
    name='minimal_package',
    version='0.0.1',
    packages=['minimal_package']
)
```

- Run `python setup.py sdist` and `python setup.py bdist_wheel`
- Check the `dist` folder
- Run `python -m build` (you may need to download `pip install build`)
- Check the `dist` folder
- Run `twine upload --repository-url https://test.pypi.org/legacy/ dist/*`

## Other packaging repositories

There are others repositories than PyPI and Test PyPI

- [Pypiserver](https://github.com/pypiserver/pypiserver) local or self-hosted
- [JFrog](https://www.jfrog.com/confluence/display/JFROG/PyPI+Repositories) self-host or cloud, complete cloud solution
- [Code artifacts](https://docs.aws.amazon.com/codeartifact/latest/ug/welcome.html) AWS cloud repository
- [Artifact registry](https://cloud.google.com/artifact-registry/docs/python/store-python) Google cloud repository
- [Gitlab package registry](https://docs.gitlab.com/ee/user/packages/pypi_repository/) Gitlab cloud repository, excelent to use in private projects

# Literate programming

Programming paradigm to tell a history with your code

## Literate programming {.smaller}

:::: {.columns} 

::: {.column width="30%"}
- Programming paradigm
- Haskell `.lhs` vs `.hs`
- Grew in the last years
- Data analysis
- Jupyter notebooks, R Studio
:::

::: {.column width="70%"}
![](images/donald-knuth-quote.png)
:::

::::

## Literate programming

```{mermaid}
flowchart
  A["WEB (language and associate programs/system)"] -- "WEAVE (processor)" --> B["TEX"]
  A -- "TANGLE (processor)" --> C["PAS"]
  C -- PASCAL --> D["REL (binary file that can be executed)"]
  B -- LATEX --> E["DVI (Device-independent binary)"]
```

The process of "compile, load, and go" has been slightly lengthened to "tangle, compile, load, and go."

## Literate programming

```{mermaid}
flowchart
  A["Jupyter Notebook"] -- "Quarto" --> B["MD"]
  A -- "Nbdev" --> C["PY"]
  B -- PANDOC --> E["PDF/HTML/DOCX"]
```

## Jupyter notebook introduction {.smaller}

- Using the virtualenv created at minimal_package, install jupyter notebooks: `pip install notebook`
- Run `jupyter-notebook`
- Get familiar with the UI

::: {.callout-tip collapse="true"}
## UI

- [Jupyter Lab](https://jupyterlab.readthedocs.io/en/stable/) it's one of the most popular UI
- Run `pip install jupyterlab` and execute `jupyter-lab` to see its interface

There are additional UIs, like the VSCode plugin that renders notebooks, but I recommend keep using classic notebooks in this tutorial
:::

# Nbdev

Using Jupyter notebooks to publish Python packaging

## Install {.smaller}

- Let's ignore our minimal project and fork the following repository: https://github.com/itepifanio/indo-alem-com-jupyter-notebook
- Create a new virtualenv `python -m venv tutorial`
- Activate your new virtualenv `source ./tutorial/bin/activate`
- Install the package running `pip install -e .[dev]`

:::{.callout-note}
Let's get familiar with the nbdev structure
:::

## Post installation

- nbdev_install_hooks
- nbdev_install_quarto

:::{.callout-tip}
Run `nbdev_help` in your terminal and check all commands available
:::

## Nbdev awesome projects {.smaller}

- [FastAI](https://github.com/fastai/fastai)
- [Ipyannotator](https://github.com/palaimon/ipyannotator)
- [TSAI](https://github.com/timeseriesAI/tsai)
- [FastKafta](https://github.com/airtai/fastkafka)
- [Number Blog](https://github.com/crowdcent/numerblox)
- [UPIT](https://github.com/tmabraham/UPIT)
- [AskAI](https://github.com/radekosmulski/ask_ai)
- [Streamlit Jupyter](https://github.com/ddobrinskiy/streamlit-jupyter)
- [Banet](https://github.com/mnpinto/banet)

# Good practices

Jupyter notebook and nbdev best practices

## Notebook type

![Know the type of notebook you're writing](https://documentation.divio.com/_images/overview.png)

## Good title and subtitle

There are two ways of doing that, one with markdown:

```bash
# My H1 title

> My description
```

Other using Quarto:

```bash
---
title: "My title"
description: "My description"
---
```

## Change the text according to the notebook type

- Reference: Start with a small description of the component, use symbolic links for easy navigation
- Tutorials and guides: Describe what the reader will learn and how. Be objective
- Explation: A brief review about the topic is enough to guide the reader

## Use visualizations {.smaller}

Jupyter notebooks are very interactive. Use images, videos, audio

```{python}
import matplotlib.pyplot as plt
plt.plot([1,23,2,4])
plt.plot([8,65,23,90])
plt.show()
```

## Keep your cells small

- No rules for size but take it easy
- Use @patch `from fastcore.basics import patch`
- Increase the testability by writing small function/classes per cell

## Jupyter notebooks

- Keep your imports at the top of the notebook
- Don't import and use code at the same cell
- Avoid ambigous execution orders
- Use code cells for experiments

## Doc parameters {.smaller}

Nbdev have two types of parameter documentation, the classic (numpy-style), as it follows:

```python
def add_np(a, b=0):
    """The sum of two numbers.

    Parameters
    ----------
    a : int
        the 1st number to add
    b : int
        the 2nd number to add (default: 0)
    """
    return a + b
```

## Doc parameters {.smaller}

```{python}
from nbdev.showdoc import show_doc

def add_np(a, b=0):
    """The sum of two numbers.

    Parameters
    ----------
    a : int
        the 1st number to add
    b : int
        the 2nd number to add (default: 0)
    """
    return a + b

show_doc(add_np)
```

## Doc parameters {.smaller}

And the nbdev approach called "docments"

```python
def add(
    a: int,  # the 1st number to add
    b=0,  # the 2nd number to add
):
    "The sum of two numbers."
    return a + b
```

```{python}
from nbdev.showdoc import show_doc

def add(
    a: int,  # the 1st number to add
    b=0,  # the 2nd number to add
):
    "The sum of two numbers."
    return a + b

show_doc(add)
```

## Write tests

- Keyword assert can be used for testing
- Run `nbdev_test`

```python
assert add(1, 1) == 2
```

## Exercice {.smaller}

```python
import collections

Card = collections.namedtuple("Card", ["rank", "suit"])
```

:::{.callout-note}
- Create a new notebook called experiments
- Add a title and description to the notebook
- Copy the `Card` class definition
- Create a function `card_name` that returns `1 of Hearts`
- Test that the `card_name` function returns the expected results
- Add your notebook to `sidebar.yml`
- Run `nbdev_preview` and see the changes
- Run `nbdev_test` and check if the testing are passing
:::

# My Deck package

We're already familiar with the `Card` defition. Let's investigate the MyDeck code.

## Exercice

:::{.callout-note}

:::