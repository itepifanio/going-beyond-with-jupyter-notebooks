# Por que empacotar?

Eu gostei do exemplo e explicação da palestra 
[Arquitetura Modular com pacotes Python](https://www.youtube.com/watch?v=Ccw9Dlw9b2c), 
do Claudio Sampaio, 
apresentada na Python Brasil 2022.

Nela eles exemplificam o filme "vingadores" como um pacote que contém 
vários super-herois (Hulk, Viúva Negra, Thor, etc).

```{mermaid}
flowchart LR
  subgraph avengers1
    A["Avengers\n (Hulk, Black Widow, Thor)"]
  end

  subgraph avengers2
   direction TB
    B["Hulk"] --> C["Avengers"]
    D["Thor"] --> C
    E["Black Widow"] --> C
  end

  avengers1 --> avengers2
```

Para reutilizar os diferentes super-heróis em linhas do tempo haveria 
uma repetição de código e aumento de complexidade, dessa forma a ideia 
seria criar um pacote para cada super-herói, permitindo a combinação 
deles em diferentes filmes.

A utilização de pacotes:

- Aumenta a modularidade
- Aumenta o reuso de código
- Pode reduzir complexidade
- Promove dependências mais fracas entre os componentes
- Pode facilitar a manutenção
- Divide a responsabilidade entre times
- Aumenta o custo de gerenciamento

## Como distribuir?

```bash
pip install -i <url-server> <package-name>
```

## Como empacotar?

Existem várias formas, que vamos ver mais adiante no minicurso,
entretanto, a forma mais comum é através da utilização do `setup.py`
através do comando:

```bash
python setup.py sdist
```

Que irá gerar um arquivo `.tar` que será utilizado para 
distribuir o pacote. No fim, para publicar no repositório python 
(geralmente o pipy), a ferramenta `twine` pode ser utilizada da 
forma que se segue:

```bash
# pip install twine
twine upload --repository-url <url-server> dist/*
```

```{mermaid}
flowchart TD
  A["Package project files (setup.py, pyproject.toml)"] --> B["Build backend (sdist, wheel)"]
  B --> C["Package artifact (.tar.gz, .whl)"]
```
